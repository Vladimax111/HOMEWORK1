from fastapi import FastAPI, HTTPException, Path
from pydantic import BaseModel
from typing import List

# Создаем приложение
app = FastAPI()

# Модель пользователя
class User(BaseModel):
    id: int
    username: str
    age: int

# Список пользователей
users: List[User] = []

# GET запрос - возвращает всех пользователей
@app.get("/users")
def get_users():
    return users

# POST запрос - добавляет нового пользователя
@app.post("/user/{username}/{age}")
def add_user(
    username: Annotated[
        str,
        Path(
            title="Enter username",
            description="Имя пользователя должно быть длиной от 5 до 20 символов",
            min_length=5,
            max_length=20,
        ),
    ],
    age: Annotated[
        int,
        Path(
            title="Enter age",
            description="Возраст пользователя должен быть от 18 до 120",
            ge=18,
            le=120,
        ),
    ],
):
    # Генерация id
    user_id = users[-1].id + 1 if users else 1
    new_user = User(id=user_id, username=username, age=age)
    users.append(new_user)
    return new_user

# PUT запрос - обновляет данные пользователя
@app.put("/user/{user_id}/{username}/{age}")
def update_user(
    user_id: Annotated[int, Path(title="User ID", description="ID пользователя")],
    username: Annotated[
        str,
        Path(
            title="Enter username",
            description="Имя пользователя должно быть длиной от 5 до 20 символов",
            min_length=5,
            max_length=20,
        ),
    ],
    age: Annotated[
        int,
        Path(
            title="Enter age",
            description="Возраст пользователя должен быть от 18 до 120",
            ge=18,
            le=120,
        ),
    ],
):
    for user in users:
        if user.id == user_id:
            user.username = username
            user.age = age
            return user
    raise HTTPException(status_code=404, detail="User was not found")

# DELETE запрос - удаляет пользователя
@app.delete("/user/{user_id}")
def delete_user(
    user_id: Annotated[int, Path(title="User ID", description="ID пользователя")]
):
    for user in users:
        if user.id == user_id:
            users.remove(user)
            return user
    raise HTTPException(status_code=404, detail="User was not found")
