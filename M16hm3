 from fastapi import FastAPI, Path
from typing import Annotated

# Создаем приложение
app = FastAPI()

# Имитация базы данных
users = {"1": "Имя: Example, возраст: 18"}

# GET запрос - Возвращает всех пользователей
@app.get("/users")
def get_users():
    return users

# POST запрос - Добавляет нового пользователя
@app.post("/user/{username}/{age}")
def add_user(
    username: Annotated[
        str, 
        Path(
            title="Enter username",
            description="Имя пользователя должно быть строкой длиной от 5 до 20 символов",
            min_length=5,
            max_length=20
        )
    ],
    age: Annotated[
        int,
        Path(
            title="Enter age",
            description="Возраст пользователя должен быть от 18 до 120 лет",
            ge=18,
            le=120
        )
    ]
):
    new_id = str(max(map(int, users.keys())) + 1)  # Находим следующий ID
    users[new_id] = f"Имя: {username}, возраст: {age}"
    return f"User {new_id} is registered"

# PUT запрос - Обновляет данные пользователя
@app.put("/user/{user_id}/{username}/{age}")
def update_user(
    user_id: Annotated[
        str,
        Path(
            title="Enter User ID",
            description="ID пользователя должен быть существующим",
            example="1"
        )
    ],
    username: Annotated[
        str,
        Path(
            title="Enter username",
            description="Имя пользователя должно быть строкой длиной от 5 до 20 символов",
            min_length=5,
            max_length=20
        )
    ],
    age: Annotated[
        int,
        Path(
            title="Enter age",
            description="Возраст пользователя должен быть от 18 до 120 лет",
            ge=18,
            le=120
        )
    ]
):
    if user_id not in users:
        return f"User {user_id} does not exist"
    users[user_id] = f"Имя: {username}, возраст: {age}"
    return f"User {user_id} has been updated"

# DELETE запрос - Удаляет пользователя
@app.delete("/user/{user_id}")
def delete_user(
    user_id: Annotated[
        str,
        Path(
            title="Enter User ID",
            description="ID пользователя должен быть существующим",
            example="1"
        )
    ]
):
    if user_id not in users:
        return f"User {user_id} does not exist"
    del users[user_id]
    return f"User {user_id} has been deleted"
